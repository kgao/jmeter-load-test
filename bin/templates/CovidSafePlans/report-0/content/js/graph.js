/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 295.0, "minX": 0.0, "maxY": 14344.0, "series": [{"data": [[0.0, 295.0], [0.1, 413.0], [0.2, 425.0], [0.3, 979.0], [0.4, 1009.0], [0.5, 1026.0], [0.6, 1039.0], [0.7, 1048.0], [0.8, 1069.0], [0.9, 1083.0], [1.0, 1090.0], [1.1, 1095.0], [1.2, 1097.0], [1.3, 1098.0], [1.4, 1102.0], [1.5, 1102.0], [1.6, 1104.0], [1.7, 1105.0], [1.8, 1105.0], [1.9, 1106.0], [2.0, 1107.0], [2.1, 1107.0], [2.2, 1107.0], [2.3, 1107.0], [2.4, 1107.0], [2.5, 1109.0], [2.6, 1109.0], [2.7, 1109.0], [2.8, 1110.0], [2.9, 1111.0], [3.0, 1111.0], [3.1, 1111.0], [3.2, 1113.0], [3.3, 1114.0], [3.4, 1116.0], [3.5, 1125.0], [3.6, 1129.0], [3.7, 1132.0], [3.8, 1135.0], [3.9, 1157.0], [4.0, 1159.0], [4.1, 1159.0], [4.2, 1161.0], [4.3, 1170.0], [4.4, 1174.0], [4.5, 1180.0], [4.6, 1185.0], [4.7, 1189.0], [4.8, 1192.0], [4.9, 1196.0], [5.0, 1201.0], [5.1, 1206.0], [5.2, 1209.0], [5.3, 1214.0], [5.4, 1222.0], [5.5, 1222.0], [5.6, 1223.0], [5.7, 1224.0], [5.8, 1224.0], [5.9, 1225.0], [6.0, 1466.0], [6.1, 1481.0], [6.2, 1481.0], [6.3, 1482.0], [6.4, 1483.0], [6.5, 1683.0], [6.6, 1684.0], [6.7, 1753.0], [6.8, 1759.0], [6.9, 1760.0], [7.0, 1760.0], [7.1, 1761.0], [7.2, 1761.0], [7.3, 1762.0], [7.4, 1762.0], [7.5, 1762.0], [7.6, 1763.0], [7.7, 1763.0], [7.8, 1764.0], [7.9, 1764.0], [8.0, 1764.0], [8.1, 1765.0], [8.2, 1765.0], [8.3, 1765.0], [8.4, 1766.0], [8.5, 1766.0], [8.6, 1767.0], [8.7, 1768.0], [8.8, 1768.0], [8.9, 1768.0], [9.0, 1768.0], [9.1, 1769.0], [9.2, 1769.0], [9.3, 1770.0], [9.4, 1771.0], [9.5, 1771.0], [9.6, 1773.0], [9.7, 1774.0], [9.8, 1774.0], [9.9, 1774.0], [10.0, 1775.0], [10.1, 1776.0], [10.2, 1776.0], [10.3, 1777.0], [10.4, 1777.0], [10.5, 1778.0], [10.6, 1778.0], [10.7, 1779.0], [10.8, 1780.0], [10.9, 1780.0], [11.0, 1781.0], [11.1, 1781.0], [11.2, 1782.0], [11.3, 1782.0], [11.4, 1783.0], [11.5, 1783.0], [11.6, 1784.0], [11.7, 1785.0], [11.8, 1787.0], [11.9, 1787.0], [12.0, 1787.0], [12.1, 1788.0], [12.2, 1789.0], [12.3, 1789.0], [12.4, 1789.0], [12.5, 1790.0], [12.6, 1790.0], [12.7, 1790.0], [12.8, 1790.0], [12.9, 1791.0], [13.0, 1791.0], [13.1, 1791.0], [13.2, 1791.0], [13.3, 1792.0], [13.4, 1792.0], [13.5, 1792.0], [13.6, 1792.0], [13.7, 1792.0], [13.8, 1793.0], [13.9, 1793.0], [14.0, 1793.0], [14.1, 1793.0], [14.2, 1794.0], [14.3, 1794.0], [14.4, 1795.0], [14.5, 1795.0], [14.6, 1795.0], [14.7, 1795.0], [14.8, 1795.0], [14.9, 1795.0], [15.0, 1795.0], [15.1, 1796.0], [15.2, 1796.0], [15.3, 1796.0], [15.4, 1796.0], [15.5, 1797.0], [15.6, 1797.0], [15.7, 1797.0], [15.8, 1798.0], [15.9, 1798.0], [16.0, 1798.0], [16.1, 1799.0], [16.2, 1799.0], [16.3, 1799.0], [16.4, 1799.0], [16.5, 1800.0], [16.6, 1800.0], [16.7, 1800.0], [16.8, 1801.0], [16.9, 1803.0], [17.0, 1804.0], [17.1, 1807.0], [17.2, 1808.0], [17.3, 1809.0], [17.4, 1809.0], [17.5, 1835.0], [17.6, 1837.0], [17.7, 1838.0], [17.8, 1838.0], [17.9, 2405.0], [18.0, 2407.0], [18.1, 2407.0], [18.2, 2407.0], [18.3, 2407.0], [18.4, 2407.0], [18.5, 2407.0], [18.6, 2408.0], [18.7, 2408.0], [18.8, 2408.0], [18.9, 2408.0], [19.0, 2408.0], [19.1, 2408.0], [19.2, 2408.0], [19.3, 2408.0], [19.4, 2408.0], [19.5, 2408.0], [19.6, 2409.0], [19.7, 2409.0], [19.8, 2409.0], [19.9, 2409.0], [20.0, 2410.0], [20.1, 2410.0], [20.2, 2410.0], [20.3, 2411.0], [20.4, 2411.0], [20.5, 2411.0], [20.6, 2412.0], [20.7, 2418.0], [20.8, 2428.0], [20.9, 3090.0], [21.0, 3090.0], [21.1, 3090.0], [21.2, 3090.0], [21.3, 3091.0], [21.4, 3091.0], [21.5, 3091.0], [21.6, 3091.0], [21.7, 3091.0], [21.8, 3091.0], [21.9, 3091.0], [22.0, 3091.0], [22.1, 3091.0], [22.2, 3091.0], [22.3, 3091.0], [22.4, 3091.0], [22.5, 3092.0], [22.6, 3092.0], [22.7, 3092.0], [22.8, 3092.0], [22.9, 3092.0], [23.0, 3092.0], [23.1, 3098.0], [23.2, 3204.0], [23.3, 3305.0], [23.4, 3322.0], [23.5, 3335.0], [23.6, 3344.0], [23.7, 3344.0], [23.8, 3355.0], [23.9, 3358.0], [24.0, 3358.0], [24.1, 3358.0], [24.2, 3360.0], [24.3, 3360.0], [24.4, 3361.0], [24.5, 3361.0], [24.6, 3363.0], [24.7, 3364.0], [24.8, 3366.0], [24.9, 3366.0], [25.0, 3367.0], [25.1, 3367.0], [25.2, 3368.0], [25.3, 3368.0], [25.4, 3369.0], [25.5, 3369.0], [25.6, 3369.0], [25.7, 3370.0], [25.8, 3370.0], [25.9, 3371.0], [26.0, 3371.0], [26.1, 3371.0], [26.2, 3372.0], [26.3, 3373.0], [26.4, 3373.0], [26.5, 3374.0], [26.6, 3374.0], [26.7, 3374.0], [26.8, 3376.0], [26.9, 3376.0], [27.0, 3376.0], [27.1, 3376.0], [27.2, 3377.0], [27.3, 3377.0], [27.4, 3378.0], [27.5, 3378.0], [27.6, 3378.0], [27.7, 3378.0], [27.8, 3379.0], [27.9, 3381.0], [28.0, 3381.0], [28.1, 3382.0], [28.2, 3382.0], [28.3, 3382.0], [28.4, 3383.0], [28.5, 3383.0], [28.6, 3384.0], [28.7, 3385.0], [28.8, 3385.0], [28.9, 3386.0], [29.0, 3387.0], [29.1, 3387.0], [29.2, 3388.0], [29.3, 3388.0], [29.4, 3389.0], [29.5, 3389.0], [29.6, 3390.0], [29.7, 3390.0], [29.8, 3391.0], [29.9, 3392.0], [30.0, 3393.0], [30.1, 3394.0], [30.2, 3394.0], [30.3, 3394.0], [30.4, 3395.0], [30.5, 3396.0], [30.6, 3396.0], [30.7, 3397.0], [30.8, 3398.0], [30.9, 3399.0], [31.0, 3399.0], [31.1, 3400.0], [31.2, 3400.0], [31.3, 3401.0], [31.4, 3401.0], [31.5, 3401.0], [31.6, 3402.0], [31.7, 3402.0], [31.8, 3403.0], [31.9, 3404.0], [32.0, 3404.0], [32.1, 3404.0], [32.2, 3405.0], [32.3, 3406.0], [32.4, 3406.0], [32.5, 3408.0], [32.6, 3409.0], [32.7, 3410.0], [32.8, 3410.0], [32.9, 3411.0], [33.0, 3411.0], [33.1, 3412.0], [33.2, 3412.0], [33.3, 3413.0], [33.4, 3414.0], [33.5, 3414.0], [33.6, 3415.0], [33.7, 3415.0], [33.8, 3415.0], [33.9, 3416.0], [34.0, 3416.0], [34.1, 3416.0], [34.2, 3416.0], [34.3, 3417.0], [34.4, 3417.0], [34.5, 3417.0], [34.6, 3418.0], [34.7, 3419.0], [34.8, 3420.0], [34.9, 3420.0], [35.0, 3421.0], [35.1, 3421.0], [35.2, 3422.0], [35.3, 3424.0], [35.4, 3425.0], [35.5, 3425.0], [35.6, 3427.0], [35.7, 3428.0], [35.8, 3429.0], [35.9, 3430.0], [36.0, 3431.0], [36.1, 3431.0], [36.2, 3432.0], [36.3, 3434.0], [36.4, 3436.0], [36.5, 3437.0], [36.6, 3442.0], [36.7, 3446.0], [36.8, 3447.0], [36.9, 3448.0], [37.0, 3451.0], [37.1, 3452.0], [37.2, 3452.0], [37.3, 3455.0], [37.4, 3465.0], [37.5, 3466.0], [37.6, 3472.0], [37.7, 3481.0], [37.8, 3489.0], [37.9, 3495.0], [38.0, 3497.0], [38.1, 3501.0], [38.2, 3502.0], [38.3, 3507.0], [38.4, 3513.0], [38.5, 3517.0], [38.6, 3522.0], [38.7, 3525.0], [38.8, 3532.0], [38.9, 3537.0], [39.0, 3538.0], [39.1, 3540.0], [39.2, 3547.0], [39.3, 3551.0], [39.4, 3555.0], [39.5, 3558.0], [39.6, 3559.0], [39.7, 3560.0], [39.8, 3561.0], [39.9, 3563.0], [40.0, 3566.0], [40.1, 3567.0], [40.2, 3569.0], [40.3, 3573.0], [40.4, 3578.0], [40.5, 3583.0], [40.6, 3586.0], [40.7, 3588.0], [40.8, 3591.0], [40.9, 3598.0], [41.0, 3599.0], [41.1, 3605.0], [41.2, 3607.0], [41.3, 3610.0], [41.4, 3613.0], [41.5, 3616.0], [41.6, 3618.0], [41.7, 3622.0], [41.8, 3627.0], [41.9, 3631.0], [42.0, 3633.0], [42.1, 3638.0], [42.2, 3640.0], [42.3, 3646.0], [42.4, 3646.0], [42.5, 3648.0], [42.6, 3657.0], [42.7, 3660.0], [42.8, 3665.0], [42.9, 3666.0], [43.0, 3669.0], [43.1, 3677.0], [43.2, 3709.0], [43.3, 3726.0], [43.4, 3737.0], [43.5, 3739.0], [43.6, 3746.0], [43.7, 3749.0], [43.8, 3753.0], [43.9, 3758.0], [44.0, 3766.0], [44.1, 3773.0], [44.2, 3775.0], [44.3, 3789.0], [44.4, 3793.0], [44.5, 3796.0], [44.6, 3806.0], [44.7, 3807.0], [44.8, 3814.0], [44.9, 3816.0], [45.0, 3820.0], [45.1, 3825.0], [45.2, 3831.0], [45.3, 3837.0], [45.4, 3842.0], [45.5, 3845.0], [45.6, 3850.0], [45.7, 3855.0], [45.8, 3858.0], [45.9, 3866.0], [46.0, 3869.0], [46.1, 3870.0], [46.2, 3883.0], [46.3, 3886.0], [46.4, 3893.0], [46.5, 3905.0], [46.6, 3910.0], [46.7, 3919.0], [46.8, 3921.0], [46.9, 3944.0], [47.0, 3957.0], [47.1, 3960.0], [47.2, 3963.0], [47.3, 3982.0], [47.4, 3985.0], [47.5, 3991.0], [47.6, 3992.0], [47.7, 4002.0], [47.8, 4003.0], [47.9, 4011.0], [48.0, 4015.0], [48.1, 4020.0], [48.2, 4034.0], [48.3, 4039.0], [48.4, 4050.0], [48.5, 4055.0], [48.6, 4067.0], [48.7, 4072.0], [48.8, 4085.0], [48.9, 4089.0], [49.0, 4091.0], [49.1, 4099.0], [49.2, 4104.0], [49.3, 4112.0], [49.4, 4113.0], [49.5, 4122.0], [49.6, 4125.0], [49.7, 4129.0], [49.8, 4136.0], [49.9, 5323.0], [50.0, 5519.0], [50.1, 5587.0], [50.2, 5602.0], [50.3, 5607.0], [50.4, 5610.0], [50.5, 5623.0], [50.6, 5625.0], [50.7, 5641.0], [50.8, 5645.0], [50.9, 5649.0], [51.0, 5652.0], [51.1, 5655.0], [51.2, 5661.0], [51.3, 5661.0], [51.4, 5676.0], [51.5, 5702.0], [51.6, 5715.0], [51.7, 5725.0], [51.8, 5736.0], [51.9, 5794.0], [52.0, 5801.0], [52.1, 5805.0], [52.2, 5815.0], [52.3, 5826.0], [52.4, 5829.0], [52.5, 5838.0], [52.6, 5842.0], [52.7, 5846.0], [52.8, 5864.0], [52.9, 5867.0], [53.0, 5872.0], [53.1, 5882.0], [53.2, 5892.0], [53.3, 5894.0], [53.4, 5898.0], [53.5, 5909.0], [53.6, 5915.0], [53.7, 5922.0], [53.8, 5934.0], [53.9, 5938.0], [54.0, 5972.0], [54.1, 5979.0], [54.2, 5983.0], [54.3, 5994.0], [54.4, 6002.0], [54.5, 6586.0], [54.6, 6594.0], [54.7, 6735.0], [54.8, 6785.0], [54.9, 6840.0], [55.0, 6921.0], [55.1, 6935.0], [55.2, 6974.0], [55.3, 6993.0], [55.4, 7063.0], [55.5, 7127.0], [55.6, 7140.0], [55.7, 7218.0], [55.8, 7218.0], [55.9, 7220.0], [56.0, 7221.0], [56.1, 7222.0], [56.2, 7223.0], [56.3, 7224.0], [56.4, 7225.0], [56.5, 7225.0], [56.6, 7225.0], [56.7, 7226.0], [56.8, 7226.0], [56.9, 7227.0], [57.0, 7228.0], [57.1, 7229.0], [57.2, 7230.0], [57.3, 7231.0], [57.4, 7232.0], [57.5, 7232.0], [57.6, 7232.0], [57.7, 7233.0], [57.8, 7233.0], [57.9, 7234.0], [58.0, 7235.0], [58.1, 7235.0], [58.2, 7236.0], [58.3, 7236.0], [58.4, 7236.0], [58.5, 7236.0], [58.6, 7238.0], [58.7, 7238.0], [58.8, 7238.0], [58.9, 7239.0], [59.0, 7239.0], [59.1, 7240.0], [59.2, 7240.0], [59.3, 7241.0], [59.4, 7242.0], [59.5, 7242.0], [59.6, 7242.0], [59.7, 7243.0], [59.8, 7243.0], [59.9, 7243.0], [60.0, 7244.0], [60.1, 7244.0], [60.2, 7244.0], [60.3, 7245.0], [60.4, 7246.0], [60.5, 7246.0], [60.6, 7247.0], [60.7, 7247.0], [60.8, 7247.0], [60.9, 7247.0], [61.0, 7248.0], [61.1, 7248.0], [61.2, 7248.0], [61.3, 7248.0], [61.4, 7249.0], [61.5, 7249.0], [61.6, 7249.0], [61.7, 7250.0], [61.8, 7251.0], [61.9, 7251.0], [62.0, 7252.0], [62.1, 7252.0], [62.2, 7252.0], [62.3, 7253.0], [62.4, 7253.0], [62.5, 7253.0], [62.6, 7254.0], [62.7, 7254.0], [62.8, 7254.0], [62.9, 7255.0], [63.0, 7255.0], [63.1, 7255.0], [63.2, 7255.0], [63.3, 7256.0], [63.4, 7256.0], [63.5, 7256.0], [63.6, 7256.0], [63.7, 7256.0], [63.8, 7256.0], [63.9, 7257.0], [64.0, 7257.0], [64.1, 7258.0], [64.2, 7258.0], [64.3, 7258.0], [64.4, 7259.0], [64.5, 7259.0], [64.6, 7259.0], [64.7, 7260.0], [64.8, 7260.0], [64.9, 7261.0], [65.0, 7261.0], [65.1, 7261.0], [65.2, 7262.0], [65.3, 7263.0], [65.4, 7264.0], [65.5, 7264.0], [65.6, 7265.0], [65.7, 7265.0], [65.8, 7265.0], [65.9, 7266.0], [66.0, 7266.0], [66.1, 7268.0], [66.2, 7269.0], [66.3, 7271.0], [66.4, 7273.0], [66.5, 7275.0], [66.6, 7283.0], [66.7, 7285.0], [66.8, 7286.0], [66.9, 7288.0], [67.0, 7289.0], [67.1, 7290.0], [67.2, 7309.0], [67.3, 7322.0], [67.4, 7328.0], [67.5, 7335.0], [67.6, 7337.0], [67.7, 7340.0], [67.8, 7346.0], [67.9, 7352.0], [68.0, 7361.0], [68.1, 7371.0], [68.2, 7376.0], [68.3, 7380.0], [68.4, 7388.0], [68.5, 7392.0], [68.6, 7398.0], [68.7, 7408.0], [68.8, 7413.0], [68.9, 7420.0], [69.0, 7422.0], [69.1, 7433.0], [69.2, 7444.0], [69.3, 7446.0], [69.4, 7457.0], [69.5, 7466.0], [69.6, 7471.0], [69.7, 7475.0], [69.8, 7475.0], [69.9, 7480.0], [70.0, 7482.0], [70.1, 7494.0], [70.2, 7497.0], [70.3, 7501.0], [70.4, 7509.0], [70.5, 7520.0], [70.6, 7535.0], [70.7, 7539.0], [70.8, 7548.0], [70.9, 7555.0], [71.0, 7559.0], [71.1, 7565.0], [71.2, 7569.0], [71.3, 7575.0], [71.4, 7577.0], [71.5, 7589.0], [71.6, 7596.0], [71.7, 7600.0], [71.8, 7606.0], [71.9, 7610.0], [72.0, 7612.0], [72.1, 7622.0], [72.2, 7632.0], [72.3, 7636.0], [72.4, 7637.0], [72.5, 7637.0], [72.6, 7638.0], [72.7, 7643.0], [72.8, 7648.0], [72.9, 7649.0], [73.0, 7653.0], [73.1, 7660.0], [73.2, 7667.0], [73.3, 7667.0], [73.4, 7673.0], [73.5, 7684.0], [73.6, 7694.0], [73.7, 7696.0], [73.8, 7701.0], [73.9, 7714.0], [74.0, 7715.0], [74.1, 7718.0], [74.2, 7722.0], [74.3, 7730.0], [74.4, 7733.0], [74.5, 7734.0], [74.6, 7735.0], [74.7, 7738.0], [74.8, 7740.0], [74.9, 7747.0], [75.0, 7754.0], [75.1, 7759.0], [75.2, 7762.0], [75.3, 7762.0], [75.4, 7764.0], [75.5, 7766.0], [75.6, 7766.0], [75.7, 7769.0], [75.8, 7769.0], [75.9, 7771.0], [76.0, 7771.0], [76.1, 7771.0], [76.2, 7771.0], [76.3, 7772.0], [76.4, 7773.0], [76.5, 7774.0], [76.6, 7776.0], [76.7, 7777.0], [76.8, 7778.0], [76.9, 7779.0], [77.0, 7779.0], [77.1, 7779.0], [77.2, 7780.0], [77.3, 7781.0], [77.4, 7782.0], [77.5, 7782.0], [77.6, 7783.0], [77.7, 7783.0], [77.8, 7783.0], [77.9, 7784.0], [78.0, 7784.0], [78.1, 7785.0], [78.2, 7785.0], [78.3, 7785.0], [78.4, 7786.0], [78.5, 7786.0], [78.6, 7786.0], [78.7, 7786.0], [78.8, 7787.0], [78.9, 7787.0], [79.0, 7788.0], [79.1, 7788.0], [79.2, 7789.0], [79.3, 7789.0], [79.4, 7789.0], [79.5, 7789.0], [79.6, 7790.0], [79.7, 7790.0], [79.8, 7791.0], [79.9, 7792.0], [80.0, 7794.0], [80.1, 7795.0], [80.2, 7795.0], [80.3, 7796.0], [80.4, 7796.0], [80.5, 7796.0], [80.6, 7797.0], [80.7, 7798.0], [80.8, 7798.0], [80.9, 7800.0], [81.0, 7800.0], [81.1, 7802.0], [81.2, 7802.0], [81.3, 7802.0], [81.4, 7803.0], [81.5, 7805.0], [81.6, 7807.0], [81.7, 7807.0], [81.8, 7811.0], [81.9, 7821.0], [82.0, 7825.0], [82.1, 7840.0], [82.2, 7841.0], [82.3, 7847.0], [82.4, 7851.0], [82.5, 7853.0], [82.6, 7861.0], [82.7, 7865.0], [82.8, 7867.0], [82.9, 7876.0], [83.0, 7878.0], [83.1, 7880.0], [83.2, 7891.0], [83.3, 7899.0], [83.4, 7905.0], [83.5, 7927.0], [83.6, 7936.0], [83.7, 7942.0], [83.8, 7946.0], [83.9, 7953.0], [84.0, 7958.0], [84.1, 7968.0], [84.2, 7985.0], [84.3, 7998.0], [84.4, 8002.0], [84.5, 8038.0], [84.6, 8249.0], [84.7, 8251.0], [84.8, 8252.0], [84.9, 8254.0], [85.0, 8316.0], [85.1, 8317.0], [85.2, 9259.0], [85.3, 9262.0], [85.4, 9325.0], [85.5, 10814.0], [85.6, 10943.0], [85.7, 10955.0], [85.8, 11034.0], [85.9, 11051.0], [86.0, 11052.0], [86.1, 11055.0], [86.2, 11060.0], [86.3, 11062.0], [86.4, 11064.0], [86.5, 11071.0], [86.6, 11073.0], [86.7, 11075.0], [86.8, 11075.0], [86.9, 11080.0], [87.0, 11082.0], [87.1, 11087.0], [87.2, 11095.0], [87.3, 11104.0], [87.4, 11107.0], [87.5, 11109.0], [87.6, 11112.0], [87.7, 11113.0], [87.8, 11116.0], [87.9, 11117.0], [88.0, 11119.0], [88.1, 11119.0], [88.2, 11121.0], [88.3, 11123.0], [88.4, 11125.0], [88.5, 11126.0], [88.6, 11128.0], [88.7, 11129.0], [88.8, 11132.0], [88.9, 11134.0], [89.0, 11139.0], [89.1, 11139.0], [89.2, 11157.0], [89.3, 11174.0], [89.4, 11178.0], [89.5, 11181.0], [89.6, 11185.0], [89.7, 11186.0], [89.8, 11193.0], [89.9, 11199.0], [90.0, 11205.0], [90.1, 11206.0], [90.2, 11210.0], [90.3, 11211.0], [90.4, 11213.0], [90.5, 11214.0], [90.6, 11218.0], [90.7, 11225.0], [90.8, 11233.0], [90.9, 11254.0], [91.0, 11258.0], [91.1, 11275.0], [91.2, 11282.0], [91.3, 11287.0], [91.4, 11293.0], [91.5, 11297.0], [91.6, 11301.0], [91.7, 11305.0], [91.8, 11339.0], [91.9, 11367.0], [92.0, 11394.0], [92.1, 11398.0], [92.2, 11411.0], [92.3, 11420.0], [92.4, 11425.0], [92.5, 11430.0], [92.6, 11439.0], [92.7, 11454.0], [92.8, 11456.0], [92.9, 11463.0], [93.0, 11469.0], [93.1, 11475.0], [93.2, 11481.0], [93.3, 11494.0], [93.4, 11502.0], [93.5, 11507.0], [93.6, 11512.0], [93.7, 11513.0], [93.8, 11517.0], [93.9, 11532.0], [94.0, 11536.0], [94.1, 11547.0], [94.2, 11550.0], [94.3, 11560.0], [94.4, 11580.0], [94.5, 11606.0], [94.6, 11611.0], [94.7, 11620.0], [94.8, 11632.0], [94.9, 11639.0], [95.0, 11639.0], [95.1, 11653.0], [95.2, 11666.0], [95.3, 11674.0], [95.4, 11679.0], [95.5, 11684.0], [95.6, 11688.0], [95.7, 11748.0], [95.8, 11757.0], [95.9, 11775.0], [96.0, 11799.0], [96.1, 11824.0], [96.2, 11840.0], [96.3, 11956.0], [96.4, 11980.0], [96.5, 11992.0], [96.6, 12002.0], [96.7, 12017.0], [96.8, 12038.0], [96.9, 12061.0], [97.0, 13341.0], [97.1, 13350.0], [97.2, 13370.0], [97.3, 13371.0], [97.4, 13383.0], [97.5, 13385.0], [97.6, 13411.0], [97.7, 13429.0], [97.8, 13713.0], [97.9, 13758.0], [98.0, 13771.0], [98.1, 13775.0], [98.2, 13796.0], [98.3, 13816.0], [98.4, 13863.0], [98.5, 14239.0], [98.6, 14247.0], [98.7, 14248.0], [98.8, 14251.0], [98.9, 14254.0], [99.0, 14257.0], [99.1, 14264.0], [99.2, 14265.0], [99.3, 14267.0], [99.4, 14271.0], [99.5, 14283.0], [99.6, 14299.0], [99.7, 14309.0], [99.8, 14317.0], [99.9, 14328.0]], "isOverall": false, "label": "HEAD \/api\/Messages\/List", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 231.0, "series": [{"data": [[600.0, 1.0], [900.0, 1.0], [1000.0, 19.0], [1100.0, 74.0], [1200.0, 19.0], [1400.0, 11.0], [1600.0, 4.0], [1700.0, 196.0], [1800.0, 27.0], [2400.0, 59.0], [3000.0, 47.0], [3300.0, 155.0], [3200.0, 2.0], [3400.0, 142.0], [3500.0, 59.0], [3700.0, 28.0], [3600.0, 42.0], [3800.0, 38.0], [3900.0, 25.0], [4000.0, 29.0], [4100.0, 15.0], [5300.0, 1.0], [5600.0, 27.0], [5500.0, 3.0], [5400.0, 1.0], [5800.0, 30.0], [5700.0, 9.0], [5900.0, 18.0], [6000.0, 2.0], [6600.0, 1.0], [6500.0, 4.0], [6900.0, 7.0], [6700.0, 3.0], [6800.0, 3.0], [7000.0, 2.0], [7100.0, 4.0], [7200.0, 231.0], [7300.0, 29.0], [7400.0, 32.0], [7600.0, 42.0], [7500.0, 29.0], [7900.0, 21.0], [7800.0, 49.0], [7700.0, 142.0], [8000.0, 3.0], [8200.0, 8.0], [8300.0, 5.0], [9200.0, 4.0], [9300.0, 2.0], [11200.0, 32.0], [11100.0, 54.0], [11000.0, 30.0], [10900.0, 4.0], [10800.0, 1.0], [11300.0, 12.0], [11600.0, 23.0], [11400.0, 24.0], [11500.0, 23.0], [11700.0, 8.0], [11800.0, 5.0], [12000.0, 8.0], [11900.0, 5.0], [13300.0, 13.0], [13700.0, 10.0], [13400.0, 3.0], [13800.0, 4.0], [14300.0, 7.0], [14200.0, 24.0], [200.0, 1.0], [300.0, 1.0], [400.0, 3.0]], "isOverall": false, "label": "HEAD \/api\/Messages\/List", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1226.0, "series": [{"data": [[0.0, 5.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 114.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1226.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 655.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 652.0360000000003, "minX": 1.58769504E12, "maxY": 652.0360000000003, "series": [{"data": [[1.58769504E12, 652.0360000000003]], "isOverall": false, "label": "Scenario - 1K", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58769504E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 305.5, "minX": 5.0, "maxY": 12911.569767441862, "series": [{"data": [[5.0, 1221.6], [8.0, 1214.0], [10.0, 1223.5], [14.0, 1222.3333333333335], [21.0, 3431.0], [22.0, 3397.0], [25.0, 1107.0], [26.0, 1107.0], [28.0, 1107.0], [30.0, 1108.0], [32.0, 1116.0], [35.0, 1108.6666666666667], [34.0, 1113.0], [37.0, 1111.0], [36.0, 1105.0], [38.0, 1107.0], [41.0, 1108.5], [40.0, 1107.0], [42.0, 1105.25], [44.0, 1109.0], [46.0, 1102.0], [49.0, 1109.0], [48.0, 1107.0], [51.0, 1098.0], [53.0, 1107.0], [56.0, 1109.0], [59.0, 3400.0], [58.0, 1693.5], [62.0, 3408.0], [66.0, 3402.5], [65.0, 3392.0], [71.0, 3416.4], [70.0, 3397.0], [69.0, 3395.5], [75.0, 3394.0], [74.0, 1097.0], [73.0, 1094.0], [72.0, 1095.0], [79.0, 3400.0], [78.0, 1092.0], [82.0, 3415.0], [80.0, 3431.0], [87.0, 3430.0], [86.0, 3385.6666666666665], [85.0, 3393.0], [95.0, 3432.0], [93.0, 3386.3333333333335], [92.0, 3383.3333333333335], [99.0, 3387.0], [97.0, 3387.0], [105.0, 3381.0], [110.0, 3390.0], [109.0, 3373.0], [108.0, 3388.0], [115.0, 3394.0], [114.0, 3400.4], [113.0, 3370.0], [119.0, 3404.0], [118.0, 3390.0], [117.0, 3408.0], [123.0, 3371.0], [120.0, 3404.5], [126.0, 3405.5], [132.0, 3378.0], [129.0, 3377.0], [128.0, 3390.0], [143.0, 3373.0], [142.0, 3385.0], [140.0, 3372.0], [139.0, 3422.0], [137.0, 3394.5], [136.0, 3371.5], [151.0, 3366.0], [148.0, 3370.0], [147.0, 3387.5], [145.0, 3385.0], [158.0, 3369.0], [157.0, 3418.0], [156.0, 3424.0], [155.0, 3387.25], [153.0, 3378.5], [167.0, 3372.5], [166.0, 3391.5], [163.0, 3367.0], [160.0, 3424.0], [173.0, 3422.0], [172.0, 3376.3333333333335], [171.0, 3370.0], [170.0, 3369.0], [168.0, 3387.0], [182.0, 3373.0], [180.0, 3348.0], [179.0, 3371.0], [176.0, 3394.6666666666665], [190.0, 3393.0], [189.0, 3411.0], [188.0, 3355.0], [185.0, 3374.0], [199.0, 3378.0], [198.0, 3417.0], [195.0, 3358.0], [193.0, 3361.0], [192.0, 3371.5], [207.0, 3368.25], [206.0, 3374.0], [205.0, 3411.0], [214.0, 3411.0], [213.0, 3385.5], [211.0, 3414.0], [210.0, 3380.0], [209.0, 3364.0], [208.0, 3392.8333333333335], [223.0, 3367.0], [222.0, 3377.0], [221.0, 3354.3333333333335], [219.0, 3406.0], [216.0, 3376.0], [230.0, 3409.0], [228.0, 3369.5], [227.0, 3409.0], [238.0, 7275.0], [237.0, 3380.0], [235.0, 3419.0], [234.0, 3404.0], [233.0, 3374.5], [232.0, 3380.3333333333335], [247.0, 3367.0], [245.0, 3421.0], [244.0, 3409.0], [243.0, 3403.0], [242.0, 3404.0], [240.0, 3409.5], [255.0, 3402.0], [254.0, 3412.0], [253.0, 3406.0], [252.0, 3411.0], [251.0, 3410.5], [250.0, 3401.0], [271.0, 4690.666666666667], [268.0, 3414.0], [264.0, 3416.0], [263.0, 3417.0], [262.0, 3406.0], [259.0, 3400.0], [257.0, 3417.0], [256.0, 3416.0], [287.0, 3416.0], [285.0, 3413.3333333333335], [283.0, 7289.0], [281.0, 3412.0], [275.0, 3405.6666666666665], [274.0, 3412.0], [301.0, 7236.0], [299.0, 7238.333333333333], [297.0, 7285.0], [296.0, 5347.5], [293.0, 5992.666666666667], [292.0, 7288.333333333333], [291.0, 7286.0], [290.0, 3415.0], [288.0, 4691.333333333333], [318.0, 7273.0], [319.0, 7257.666666666667], [317.0, 7256.0], [316.0, 7254.5], [315.0, 7263.5], [314.0, 7256.0], [313.0, 7255.0], [310.0, 7238.0], [309.0, 7257.0], [308.0, 7257.0], [333.0, 7238.0], [322.0, 305.5], [334.0, 7232.0], [332.0, 7244.5], [330.0, 7239.0], [329.0, 7252.0], [328.0, 7242.333333333333], [327.0, 7236.0], [321.0, 7233.0], [320.0, 7252.25], [326.0, 7252.5], [325.0, 7259.0], [324.0, 7236.0], [349.0, 7235.2], [348.0, 7246.0], [346.0, 7258.0], [341.0, 7254.333333333333], [338.0, 7228.0], [337.0, 7240.0], [336.0, 7245.0], [365.0, 7242.5], [363.0, 7238.5], [362.0, 7231.0], [358.0, 7237.0], [357.0, 7246.0], [353.0, 7247.0], [352.0, 7238.666666666667], [381.0, 7236.666666666667], [380.0, 7237.333333333333], [379.0, 7240.0], [377.0, 7243.0], [373.0, 7231.75], [369.0, 7247.0], [368.0, 7227.0], [396.0, 7262.0], [395.0, 7242.0], [394.0, 7222.0], [391.0, 7231.0], [390.0, 7242.0], [389.0, 7242.0], [386.0, 7226.0], [385.0, 7252.25], [413.0, 7241.5], [415.0, 8259.0], [412.0, 7238.0], [411.0, 7244.0], [410.0, 7218.0], [409.0, 7238.0], [408.0, 7224.0], [405.0, 7223.714285714285], [400.0, 7239.0], [402.0, 7250.0], [431.0, 7370.0], [426.0, 7488.4], [421.0, 7536.5], [419.0, 7536.5], [417.0, 7274.0], [416.0, 7254.0], [444.0, 7527.5], [443.0, 7536.5], [440.0, 7393.0], [439.0, 7259.666666666667], [438.0, 7255.0], [435.0, 7256.0], [449.0, 2264.5], [463.0, 7259.0], [462.0, 7532.5], [459.0, 7256.0], [458.0, 7252.5], [455.0, 7245.0], [452.0, 7800.0], [451.0, 7269.0], [479.0, 7795.5], [474.0, 7268.0], [472.0, 7251.0], [471.0, 7261.0], [470.0, 7244.0], [469.0, 7795.0], [468.0, 7438.0], [495.0, 7794.0], [493.0, 7248.0], [491.0, 7797.0], [487.0, 7257.0], [485.0, 7242.5], [484.0, 7798.0], [483.0, 7664.25], [481.0, 7248.0], [498.0, 7801.0], [508.0, 7518.75], [507.0, 7252.0], [503.0, 7392.5], [502.0, 7434.5], [501.0, 7795.0], [500.0, 7265.0], [499.0, 7318.625], [497.0, 7250.0], [529.0, 8253.0], [541.0, 7254.0], [543.0, 7785.0], [528.0, 7427.0], [540.0, 7241.0], [538.0, 7789.0], [536.0, 7788.0], [519.0, 7790.0], [518.0, 7515.5], [516.0, 7251.0], [512.0, 7256.0], [526.0, 7249.0], [525.0, 7244.0], [523.0, 7261.0], [521.0, 7791.0], [520.0, 7422.333333333333], [535.0, 7590.833333333333], [534.0, 7237.0], [531.0, 9325.0], [575.0, 11036.5], [569.0, 11440.916666666666], [566.0, 11162.90909090909], [565.0, 11286.72], [564.0, 11178.666666666666], [563.0, 12911.569767441862], [562.0, 12260.333333333334], [559.0, 9625.666666666666], [544.0, 7253.0], [548.0, 7784.0], [547.0, 8096.833333333334], [550.0, 7520.0], [605.0, 9439.0], [596.0, 7787.5], [606.0, 7782.0], [593.0, 7786.0], [592.0, 7786.0], [595.0, 7784.0], [594.0, 7786.0], [604.0, 7783.0], [603.0, 7783.0], [601.0, 7781.5], [577.0, 11196.923076923076], [591.0, 7777.0], [590.0, 7787.5], [589.0, 12017.0], [588.0, 7783.666666666667], [587.0, 10309.72], [586.0, 9986.888888888889], [585.0, 10747.58333333333], [584.0, 11956.0], [599.0, 7784.0], [598.0, 7782.0], [597.0, 7783.0], [638.0, 7722.0], [639.0, 7769.0], [637.0, 9725.5], [636.0, 7772.0], [634.0, 7752.0], [632.0, 7730.0], [623.0, 8912.0], [612.0, 7781.0], [609.0, 7767.0], [615.0, 8427.8], [614.0, 7732.0], [622.0, 7775.0], [621.0, 7771.5], [620.0, 7779.5], [631.0, 7775.0], [629.0, 7775.25], [627.0, 7771.0], [624.0, 7752.0], [667.0, 2410.0], [650.0, 1527.0], [669.0, 2410.0], [666.0, 2410.0], [647.0, 11449.216666666667], [646.0, 7319.5], [642.0, 7774.0], [641.0, 7761.5], [661.0, 2411.0], [659.0, 2411.0], [658.0, 2410.5], [654.0, 2419.25], [649.0, 11516.529411764706], [648.0, 11538.333333333334], [701.0, 2407.0], [702.0, 2407.0], [700.0, 2407.0], [699.0, 2407.3333333333335], [694.0, 2409.0], [692.0, 2408.0], [690.0, 2408.0], [688.0, 2408.0], [687.0, 2408.0], [673.0, 2409.0], [675.0, 2408.75], [674.0, 2409.0], [679.0, 2410.0], [678.0, 2409.0], [686.0, 2408.5], [685.0, 2408.0], [680.0, 2408.5], [723.0, 2512.2], [732.0, 1713.0], [731.0, 1768.0], [728.0, 1683.5], [711.0, 7040.292682926829], [710.0, 7729.000000000001], [709.0, 7351.785714285714], [708.0, 7574.6373056994835], [705.0, 2406.8], [719.0, 1481.0], [716.0, 1482.0], [715.0, 1483.3333333333333], [712.0, 6385.4], [726.0, 1791.0], [725.0, 1780.0], [724.0, 5411.6923076923085], [721.0, 1480.0], [720.0, 1482.0], [755.0, 1766.0], [765.0, 1759.0], [761.0, 1763.0], [760.0, 1770.0], [743.0, 1823.0], [740.0, 1768.0], [737.0, 1838.0], [736.0, 1838.0], [759.0, 1768.0], [758.0, 1768.0], [757.0, 1783.0], [753.0, 1761.0], [751.0, 1836.0], [748.0, 1799.0], [798.0, 1763.0], [799.0, 1786.0], [797.0, 1760.0], [796.0, 1809.0], [795.0, 1797.0], [794.0, 1788.5], [783.0, 1769.0], [770.0, 1808.5], [768.0, 1837.0], [772.0, 1762.5], [771.0, 1766.0], [782.0, 1762.0], [781.0, 1765.0], [780.0, 1774.0], [779.0, 1779.4], [778.0, 1773.0], [791.0, 1766.0], [789.0, 1777.5], [787.0, 1760.0], [786.0, 1762.0], [819.0, 1785.0], [830.0, 1779.6666666666667], [831.0, 1777.0], [818.0, 1765.0], [816.0, 1781.0], [828.0, 1783.0], [827.0, 1778.0], [826.0, 1762.0], [803.0, 1774.5], [801.0, 1783.0], [814.0, 1780.9], [813.0, 1781.0], [810.0, 1774.0], [808.0, 1765.5], [823.0, 1761.6666666666667], [822.0, 1769.0], [821.0, 1780.0], [860.0, 1793.5], [863.0, 1788.0], [848.0, 1808.0], [859.0, 1792.0], [858.0, 1768.0], [857.0, 1770.0], [856.0, 1774.0], [847.0, 1783.625], [833.0, 1784.0], [837.0, 1782.0], [835.0, 1776.0], [839.0, 1778.6666666666667], [838.0, 1791.0], [844.0, 1762.0], [842.0, 1760.0], [841.0, 1776.2], [840.0, 1778.5], [854.0, 1785.75], [853.0, 1783.5], [852.0, 1782.5], [849.0, 1769.0], [883.0, 1775.0], [895.0, 1792.0], [892.0, 1784.3333333333333], [891.0, 1792.6666666666667], [871.0, 1780.0], [870.0, 1786.75], [868.0, 1791.4], [866.0, 1779.0], [865.0, 1764.0], [864.0, 1787.0], [879.0, 1786.6666666666667], [878.0, 1791.0], [875.0, 1795.0], [873.0, 1803.0], [872.0, 1793.0], [887.0, 1795.0], [886.0, 1798.0], [884.0, 1793.0], [881.0, 1770.0], [880.0, 1795.0], [925.0, 1795.0], [926.0, 1798.0], [912.0, 1794.0], [915.0, 1792.0], [913.0, 1791.0], [917.0, 1795.0], [916.0, 1792.0], [924.0, 1794.0], [923.0, 1795.0], [922.0, 1793.5], [921.0, 1793.0], [920.0, 1792.0], [906.0, 1795.2], [897.0, 1792.0], [900.0, 1792.0], [898.0, 1796.0], [901.0, 1799.5], [919.0, 1797.0], [918.0, 1771.0], [948.0, 1800.0], [951.0, 5643.421686746989], [950.0, 1793.8333333333335], [949.0, 1793.0], [946.0, 1795.0], [945.0, 1799.0], [944.0, 1792.0], [938.0, 1792.0], [937.0, 1800.142857142857], [935.0, 1797.0], [934.0, 1792.0], [933.0, 1795.0], [931.0, 1795.0], [1000.0, 2967.3986486486474], [999.0, 3769.3448275862065], [998.0, 3446.361233480176], [997.0, 3402.0]], "isOverall": false, "label": "HEAD \/api\/Messages\/List", "isController": false}, {"data": [[652.0360000000003, 5698.707999999986]], "isOverall": false, "label": "HEAD \/api\/Messages\/List-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9133.333333333334, "minX": 1.58769504E12, "maxY": 17884.5, "series": [{"data": [[1.58769504E12, 17884.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58769504E12, 9133.333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58769504E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5698.707999999986, "minX": 1.58769504E12, "maxY": 5698.707999999986, "series": [{"data": [[1.58769504E12, 5698.707999999986]], "isOverall": false, "label": "HEAD \/api\/Messages\/List", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58769504E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58769504E12, "maxY": 4.9E-324, "series": [{"data": [[1.58769504E12, 0.0]], "isOverall": false, "label": "HEAD \/api\/Messages\/List", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58769504E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 56.64299999999999, "minX": 1.58769504E12, "maxY": 56.64299999999999, "series": [{"data": [[1.58769504E12, 56.64299999999999]], "isOverall": false, "label": "HEAD \/api\/Messages\/List", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58769504E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 295.0, "minX": 1.58769504E12, "maxY": 14344.0, "series": [{"data": [[1.58769504E12, 14344.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58769504E12, 295.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58769504E12, 11488.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58769504E12, 14268.08]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58769504E12, 12003.4]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58769504E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 533.5, "minX": 10.0, "maxY": 13780.5, "series": [{"data": [[550.0, 3431.0], [74.0, 13780.5], [317.0, 5810.0], [307.0, 11171.0], [10.0, 533.5], [48.0, 1159.0], [219.0, 7582.0], [118.0, 7667.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[317.0, 1788.0], [357.0, 3592.0], [219.0, 1481.5], [118.0, 2408.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 550.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 10.0, "maxY": 4.9E-324, "series": [{"data": [[550.0, 0.0], [74.0, 0.0], [317.0, 0.0], [307.0, 0.0], [10.0, 0.0], [48.0, 0.0], [219.0, 0.0], [118.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[317.0, 0.0], [357.0, 0.0], [219.0, 0.0], [118.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 550.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.58769504E12, "maxY": 33.333333333333336, "series": [{"data": [[1.58769504E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58769504E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.916666666666666, "minX": 1.58769504E12, "maxY": 22.416666666666668, "series": [{"data": [[1.58769504E12, 22.416666666666668]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58769504E12, 10.916666666666666]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58769504E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.916666666666666, "minX": 1.58769504E12, "maxY": 22.416666666666668, "series": [{"data": [[1.58769504E12, 22.416666666666668]], "isOverall": false, "label": "HEAD \/api\/Messages\/List-success", "isController": false}, {"data": [[1.58769504E12, 10.916666666666666]], "isOverall": false, "label": "HEAD \/api\/Messages\/List-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58769504E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.916666666666666, "minX": 1.58769504E12, "maxY": 22.416666666666668, "series": [{"data": [[1.58769504E12, 22.416666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58769504E12, 10.916666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58769504E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

